__author__ = "Shadman Wadith"
__copyright__ = "Copyright 2022, Cryptography and Network Security Lab"
__license__ = "Apache-2.0"
__version__ = "1.0"
__email__ = "wadith.24csedu.027@gmail.com"
__status__ = "Production"

"""
Description :   This following code is demonstration of basic One Time Pad attack
                If you XOR both encrypted message then you can cancel out the key 
                and get both message XORed in one string. Please click the link below 
                to get a nice visual demonstration

Link        :   https://crypto.stackexchange.com/questions/59/taking-advantage-of-one-time-pad-key-reuse 

"""

def xorCipher(text_1,text_2):
    """
    Function for XORING two message
    :param text_1: First Ciphertext
    :param text_2: Second Ciphertext
    :return: returns xor-ed text
    """
    xor_text = [0] * len(text_1)
    for i in range(len(text_1)):
        xor_text[i] = text_1[i] ^ text_2[i]
    # print(xor_ciphertext)
    return xor_text
# Press the green button in the gutter to run the script.


def selectDesiredLengthWords(list, length):
    """
    As our cipher text have fixed length so we made a function
    where you take only fixed length of words from Dictionary
    :param list: List of words in English Dictionary
    :param length: Length of words we want
    :return:
    """
    word_list = ['']  # initializing word list
    word_set = {}
    for word in list:
        if len(word) == length:
            word_list.append(word)
    word_set = set(word_list)  # using set so that there are no repetition of same words
    # return  word_list
    return word_set


def match_plaintext(word_list, xor_cipher):
    """
    As we have two decrypted word XORed in a message, if we can
    XOR one real message with other, then we can find the actual

    word from it. So we itereate through the dictionary and XOR
    every word with the message and check if there is another valid
    word for it which we can find in the dictionary
    :param word_list:
    :param xor_cipher:
    :return:
    """
    for word in word_list:
        predicted_text = ''
        for i in range(len(word)):
            predicted_hex = ord(word[i]) ^ xor_cipher[i]
            predicted_text += chr(predicted_hex)  # Adding the alphabet character by character
        if predicted_text in word_list and predicted_text != '':
            print("Two deciphered words :")
            print(word)
            print(predicted_text)

            break


if __name__ == '__main__':
    ciphertext_1 = [0xe9, 0x3a, 0xe9, 0xc5, 0xfc, 0x73, 0x55, 0xd5]
    ciphertext_2 = [0xf4, 0x3a, 0xfe, 0xc7, 0xe1, 0x68, 0x4a, 0xdf]
    xor_ciphertext = xorCipher(ciphertext_1, ciphertext_2)  # XORing both cipher text
    # print(xor_ciphertext)
    file = open("word.txt", "r")
    words = file.read().split()
    desired_words = selectDesiredLengthWords(words, 8)
    # print(desired_words)
    match_plaintext(desired_words, xor_ciphertext)  # Extracting word from

    # print(file.read().split())

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
