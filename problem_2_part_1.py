__author__ = "Shadman Wadith"
__copyright__ = "Copyright 2022, Cryptography and Network Security Lab"
__license__ = "Apache-2.0"
__version__ = "1.0"
__email__ = "wadith.24csedu.027@gmail.com"
__status__ = "Production"

"""
Description :   This following code is demonstration of encryption and decryption using one time pad 
                with the following function Ci = Mi ^ (( Pi + C(i-1) ) % 256). After starting the program
                then you can manually input key and message where you need to input same length of message 
                and key. Also if you want a demonstration you can press 2 as a input
                                   
"""

def stringToIntList(msg):
    """
        This function converts the list of ascii character to ascii value
        :param msg:
        :return: returns a list of the ascii values
        """
    array = []
    for i in range(len(msg)):
        array.append(ord(msg[i]))
    return array

def encrypt(msg, key):
    """
    Encrypting msg using this function Ci = Mi ^ (( Pi + C(i-1) ) % 256)
    where C is the Ciphertext, M is message and P is pad/key
    :param msg:
    :param key:
    :return:
    """
    encrypt_array = []  # initializing encrypted message array
    previous_cipher_byte = 0  # It represents C0 = 0
    for i in range(len(msg)):
        if i!= 0:
            previous_cipher_byte = encrypt_array[i-1]
        encrypt_part = (msg[i] ^ key[i] + previous_cipher_byte) % 256
        encrypt_array.append(encrypt_part)
    return encrypt_array


def decrypt(encrypted_int, key_int):
    """
    decrypts the message using Mi = Ci ^ (( Ki + Ci-1 ) % 256 )
    :param encrypted_int: encrypted Message in ASCII value form
    :param key_int: Key in ASCII value form
    :return: returns a list of decrypted ASCII value which is the message
    """
    decrypt_array = []  # initializing decrypted array
    previous_cipher_byte = 0
    for i in range(len(encrypted_int)):
        if i != 0:
            previous_cipher_byte = encrypted_int[i-1]
        decrypted_part = encrypted_int[i] ^ ((key_int[i] + previous_cipher_byte) % 256)
        decrypt_array.append(decrypted_part)
    return decrypt_array


def menu(choice):
    if choice == 1:
        message = input("Enter a plain text : ")
        print()
        message_int = stringToIntList(message)
        # print(message_int)
        flag = 0
        while flag != 1:
            key_text = input("Enter a key(same length as plain text): ")
            if len(key_text) != len(message):
                print()
                print("Message and Key length aren't same. Please try again")
                print()
            else:
                flag = 1  # which will break the loop
        print()
        key_int = stringToIntList(key_text)
        encrypted_int = encrypt(message_int, key_int)
        encrypted_msg = intToChar(encrypted_int)
        print("Encrypted message in form of ASCII \nvalue : ")
        print(encrypted_int)
        decrypted_int = decrypt(encrypted_int, key_int)

        decrypted_message = intToChar(decrypted_int)
        print("Decrypted message : ")
        print(decrypted_message)
    elif choice == 2:
        message = "OneTimePad"
        key = "psERtMLkjx"
        print("Plain Text        : " + message)
        print("Key               : " + key)
        msg_int = stringToIntList(message)
        key_int = stringToIntList(key)
        encrypted_int = encrypt(msg_int, key_int)
        encrypted_msg = intToChar(encrypted_int)
        print("Encrypted message in form of ASCII \nvalue : ")
        print(encrypted_int)
        decrypted_int = decrypt(encrypted_int, key_int)

        decrypted_message = intToChar(decrypted_int)
        print("Decrypted message : " + decrypted_message)


def intToChar(msg_int):
    msg = ""
    for number in msg_int:
        msg += chr(number)
    return msg


if __name__ == '__main__':
    print("Pick your choice :")
    print("1. Manual Input")
    print("2. Demo")
    choice = input("Input : ")

    menu(int(choice))
